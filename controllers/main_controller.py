"""
üéÆ Main Controller - CONTROLLER
Controlador principal da aplica√ß√£o
"""

import threading
import time
from pathlib import Path
import sys
import os

# Adicionar diret√≥rios aos paths
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from models.config_manager import ConfigManager
from models.detection_model import DetectionModel
from models.camera_model import CameraModel
from views.main_interface import MainInterface

class MainController:
    def __init__(self):
        # Inicializar models
        self.config_manager = ConfigManager()
        self.camera_model = CameraModel(self.config_manager)
        self.detection_model = DetectionModel(self.config_manager)
        
        # Estado da aplica√ß√£o
        self.camera_running = False
        self.detection_running = False
        self.update_thread = None
        self.should_stop = False
        
        # Inicializar interface
        self.view = MainInterface(self)
        
        # Carregar configura√ß√µes na UI
        self.view.load_config_to_ui(self.config_manager)
        
        # Iniciar thread de atualiza√ß√£o da interface
        self.start_update_thread()
        
    def start_update_thread(self):
        """Inicia thread para atualizar interface"""
        self.should_stop = False
        self.update_thread = threading.Thread(target=self._update_loop, daemon=True)
        self.update_thread.start()
    
    def _update_loop(self):
        """Loop principal de atualiza√ß√£o"""
        while not self.should_stop:
            try:
                # Atualizar v√≠deo se c√¢mera estiver ativa
                if self.camera_running:
                    frame = self.camera_model.get_frame()
                    
                    if frame is not None:
                        processed_frame = frame
                        detections = []
                        
                        # Aplicar detec√ß√£o se ativa
                        if self.detection_running:
                            processed_frame, detections = self.detection_model.detectar(frame)
                        
                        # Atualizar interface
                        self.view.update_video_display(processed_frame)
                        
                        # Atualizar estat√≠sticas
                        fps = self.detection_model.get_fps()
                        det_count = len(detections)
                        
                        self.view.update_status({
                            'fps': fps,
                            'detections': det_count,
                            'camera_status': 'Conectada' if self.camera_running else 'Desconectada'
                        })
                
                # Atualizar bot√µes
                self.view.update_buttons(self.camera_running, self.detection_running)
                
                time.sleep(0.03)  # ~30 FPS
                
            except Exception as e:
                print(f"‚ùå Erro no loop de atualiza√ß√£o: {e}")
                time.sleep(0.1)
    
    # M√©todos de controle da c√¢mera
    def toggle_camera(self):
        """Liga/desliga c√¢mera"""
        if not self.camera_running:
            if self.camera_model.start_camera():
                self.camera_running = True
                self.view.log_message("üìπ C√¢mera iniciada com sucesso")
            else:
                self.view.log_message("‚ùå Falha ao iniciar c√¢mera")
        else:
            self.camera_model.stop_camera()
            self.camera_running = False
            self.detection_running = False
            self.view.log_message("üìπ C√¢mera parada")
    
    def change_camera(self, device_id):
        """Troca c√¢mera"""
        if self.camera_model.change_camera(device_id):
            self.view.log_message(f"üìπ C√¢mera trocada para dispositivo {device_id}")
        else:
            self.view.log_message(f"‚ùå Falha ao trocar para c√¢mera {device_id}")
    
    def change_resolution(self, width, height):
        """Altera resolu√ß√£o da c√¢mera"""
        self.config_manager.set('camera.resolution_width', width)
        self.config_manager.set('camera.resolution_height', height)
        
        # Reiniciar c√¢mera se estiver ativa
        if self.camera_running:
            self.camera_model.stop_camera()
            if self.camera_model.start_camera():
                self.view.log_message(f"üìê Resolu√ß√£o alterada para {width}x{height}")
            else:
                self.view.log_message("‚ùå Falha ao aplicar nova resolu√ß√£o")
    
    # M√©todos de controle da detec√ß√£o
    def toggle_detection(self):
        """Liga/desliga detec√ß√£o"""
        if not self.detection_running:
            if self.camera_running:
                self.detection_running = True
                self.view.log_message("üéØ Detec√ß√£o iniciada")
            else:
                self.view.log_message("‚ùå Inicie a c√¢mera antes da detec√ß√£o")
        else:
            self.detection_running = False
            self.view.log_message("üéØ Detec√ß√£o parada")
    
    def update_confidence(self, value):
        """Atualiza threshold de confian√ßa"""
        self.config_manager.set('model.confidence_threshold', value)
        self.view.log_message(f"üéØ Confian√ßa atualizada: {value:.2f}")
    
    def update_iou(self, value):
        """Atualiza threshold IoU"""
        self.config_manager.set('model.iou_threshold', value)
        self.view.log_message(f"üìè IoU atualizado: {value:.2f}")
    
    def update_display_options(self, options):
        """Atualiza op√ß√µes de visualiza√ß√£o"""
        for key, value in options.items():
            self.config_manager.set(f'display.{key}', value)
        self.view.log_message("üëÅÔ∏è Op√ß√µes de visualiza√ß√£o atualizadas")
    
    def update_brightness(self, value):
        """Atualiza brilho da imagem"""
        self.camera_model.update_brightness(value)
        self.view.log_message(f"‚òÄÔ∏è Brilho atualizado: {value:.0f}")
    
    def update_contrast(self, value):
        """Atualiza contraste da imagem"""
        self.camera_model.update_contrast(value)
        self.view.log_message(f"üîÜ Contraste atualizado: {value:.2f}")
    
    def update_sharpness(self, value):
        """Atualiza nitidez da imagem"""
        self.camera_model.update_sharpness(value)
        self.view.log_message(f"üîç Nitidez atualizada: {value:.1f}")
    
    def reset_image_settings(self):
        """Reseta configura√ß√µes de imagem para valores padr√£o"""
        self.camera_model.update_brightness(0)
        self.camera_model.update_contrast(1.0)
        self.camera_model.update_sharpness(0)
        self.view.log_message("üé® Configura√ß√µes de imagem resetadas")
    
    def reload_model(self):
        """Recarrega o modelo"""
        if self.detection_model.reload_model():
            model_path = self.config_manager.get('model.path', 'N/A')
            self.view.model_path_label.config(text=f"Modelo: {model_path}")
            self.view.log_message("ü§ñ Modelo recarregado com sucesso")
        else:
            self.view.log_message("‚ùå Falha ao recarregar modelo")
    
    # M√©todos de configura√ß√£o
    def save_config(self):
        """Salva configura√ß√µes"""
        if self.config_manager.salvar_config():
            self.view.log_message("üíæ Configura√ß√µes salvas com sucesso")
        else:
            self.view.log_message("‚ùå Falha ao salvar configura√ß√µes")
    
    def reset_config(self):
        """Restaura configura√ß√µes padr√£o"""
        if self.config_manager.reset_to_default():
            self.view.load_config_to_ui(self.config_manager)
            self.view.log_message("üîÑ Configura√ß√µes restauradas ao padr√£o")
        else:
            self.view.log_message("‚ùå Falha ao restaurar configura√ß√µes")
    
    # Limpeza e finaliza√ß√£o
    def cleanup(self):
        """Limpa recursos antes de fechar"""
        self.should_stop = True
        
        if self.camera_running:
            self.camera_model.stop_camera()
        
        # Salvar configura√ß√µes automaticamente
        self.config_manager.salvar_config()
        
        print("üßπ Recursos limpos com sucesso")
    
    def run(self):
        """Executa a aplica√ß√£o"""
        print("üéØ YOLO Detection Studio - Interface Gr√°fica")
        print("Iniciando aplica√ß√£o...")
        
        try:
            self.view.run()
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Interrompido pelo usu√°rio")
        except Exception as e:
            print(f"‚ùå Erro na execu√ß√£o: {e}")
        finally:
            self.cleanup()

def main():
    """Fun√ß√£o principal"""
    try:
        app = MainController()
        app.run()
    except Exception as e:
        print(f"‚ùå Erro fatal: {e}")
        input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()